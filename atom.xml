<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kk_000&#39;s Blog</title>
  
  <subtitle>Stay Hungry, Stay Foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kyherg.kk/"/>
  <updated>2019-10-30T16:31:28.222Z</updated>
  <id>http://kyherg.kk/</id>
  
  <author>
    <name>kk_000</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>KMP</title>
    <link href="http://kyherg.kk/KMP/"/>
    <id>http://kyherg.kk/KMP/</id>
    <published>2019-10-26T13:30:10.000Z</published>
    <updated>2019-10-30T16:31:28.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个我看了好久才明白的算法"><a href="#一个我看了好久才明白的算法" class="headerlink" title="一个我看了好久才明白的算法"></a>一个我看了好久才明白的算法</h1><blockquote><p>KMP算法是由 D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因此我们取三个人的首字母，作为这个算法的名称。</p></blockquote><h2 id="模式匹配？"><a href="#模式匹配？" class="headerlink" title="模式匹配？"></a>模式匹配？</h2><blockquote><p> 模式匹配是数据结构中字符串的一种基本运算，给定一个子串，要求在某个字符串中找出与该子串相同的所有子串，这就是模式匹配。<em>——百度百科</em></p></blockquote><p>为方便，以下设主串的长度为 $n$，令它为<code>text</code>，要匹配的串长度为$m$，令它为<code>pattern</code>。</p><h2 id="暴力做法："><a href="#暴力做法：" class="headerlink" title="暴力做法："></a>暴力做法：</h2><ul><li>将两个字符串一位一位的配对，当我们失配时，从主串（开始时的）的后一位继续从头匹配</li></ul><p>最坏复杂度：$O(nm)$，实际上对于随机情况下的匹配，这种方法是很快的，但是本算法最坏情况非常容易构造，因此这种做法并不是很好。</p><p><strong>怎么才能快速的匹配呢?</strong></p><p>然后，三位神犇（上文已经提了，发明了KMP算法来解决这个问题。</p><h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><hr><h3 id="1-预处理-nxt-数组"><a href="#1-预处理-nxt-数组" class="headerlink" title="1.预处理$nxt[\ ]$数组"></a>1.预处理$nxt[\ ]$数组</h3><ul><li>含义：$nxt[i]$ 表示在$pattern[0…i]$中的最长相等前后缀。<br>Sample：<code>abcabcd</code>中，$nxt[] = {0,0,1,2,3,0}$。</li><li>如何高效计算？<ul><li>两个指针，一个叫做 $i$，另一个叫做 $j$，我们令$i = 1,\ j = 0$，然后在循环中让 $i$ 每次有一个增量（<code>i ++</code>。</li><li>当 $j$ 与 $i$，不匹配时，我们需要更新 $j$，此时，我们之前计算出来的 $nxt[\ ]$ 就能派上用场了，由于 $nxt[i]$ 维护了区间前 $i$ 中最长的相等前缀后缀，因为他们相等，因此，我们下次在进行比对时，只需要</li></ul></li></ul><h3 id="2-开始匹配"><a href="#2-开始匹配" class="headerlink" title="2.开始匹配"></a>2.开始匹配</h3><ul><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一个我看了好久才明白的算法&quot;&gt;&lt;a href=&quot;#一个我看了好久才明白的算法&quot; class=&quot;headerlink&quot; title=&quot;一个我看了好久才明白的算法&quot;&gt;&lt;/a&gt;一个我看了好久才明白的算法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;KMP算法是由 D.E.K
      
    
    </summary>
    
    
    
      <category term="Algorithms Learning" scheme="http://kyherg.kk/tags/Algorithms-Learning/"/>
    
  </entry>
  
  <entry>
    <title>BigInteger</title>
    <link href="http://kyherg.kk/BigInteger/"/>
    <id>http://kyherg.kk/BigInteger/</id>
    <published>2019-10-23T05:20:23.000Z</published>
    <updated>2019-10-23T05:20:23.957Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Disjoint Set</title>
    <link href="http://kyherg.kk/Disjoint-Set/"/>
    <id>http://kyherg.kk/Disjoint-Set/</id>
    <published>2019-10-14T15:18:38.000Z</published>
    <updated>2019-10-20T05:23:10.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Disjoint-Set"><a href="#Disjoint-Set" class="headerlink" title="Disjoint Set"></a>Disjoint Set</h1><blockquote><p>  <strong>并查集</strong>是一种树型的数据结构，用于处理一些不交集（Disjoint Sets）的合并及查询问题。                                                                        ——Wikipedia</p></blockquote><p><strong>实际上，并查集就是森林。</strong></p><p>一般来说，我们需要实现两种操作。</p><h2 id="Find操作"><a href="#Find操作" class="headerlink" title="Find操作"></a>Find操作</h2><ul><li>这个操作是用来查找某一个元素的所在集合的代表值</li><li>同时可以通过代表制来判断两个元素是否在同一个集合内</li></ul><h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><ul><li>一般来说，在实现的时候，因为我们仅仅关心<strong>两元素是否在一个集合内</strong>，而并不是它们两个<strong>具体的</strong>（混凝土 关系，因此我们可以直接将一个节点的父亲直接设定为这个集合的<strong>“大”</strong>祖先，这样并查集森林的深度就可以非常小，时间复杂度可以降到非常低</li></ul><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x] == x) &#123;</span><br><span class="line">        <span class="keyword">return</span> f[x];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> f[x] = find(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><p>——摘自<em>《算法竞赛进阶指南》</em></p><h3 id="程序自动分析"><a href="#程序自动分析" class="headerlink" title="程序自动分析"></a>程序自动分析</h3><ul><li>要维护关系的集合，里面有两种关系：<strong>相等</strong>和<strong>不相等</strong></li><li>我们可以用图的方式来进行维护，但是这样就会超时，该怎么办呢？</li><li>这时我们可以用并查集来维护啊！</li><li>因为相等的关系具有传递性，因此我们可以先用并查集维护相等的关系，在对不相等的关系进行判断，这样就能完美解决本题。</li></ul><p><strong>关键在于找到具有传递性的关系，这种关系可以通过并查集来进行维护</strong></p><h2 id="“扩展域”与“边带权”的并查集"><a href="#“扩展域”与“边带权”的并查集" class="headerlink" title="“扩展域”与“边带权”的并查集"></a>“扩展域”与“边带权”的并查集</h2><p>——未完待续。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Disjoint-Set&quot;&gt;&lt;a href=&quot;#Disjoint-Set&quot; class=&quot;headerlink&quot; title=&quot;Disjoint Set&quot;&gt;&lt;/a&gt;Disjoint Set&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  &lt;strong&gt;并查集&lt;/st
      
    
    </summary>
    
    
    
      <category term="Algorithms Learning" scheme="http://kyherg.kk/tags/Algorithms-Learning/"/>
    
  </entry>
  
  <entry>
    <title>LCA</title>
    <link href="http://kyherg.kk/LCA/"/>
    <id>http://kyherg.kk/LCA/</id>
    <published>2019-10-11T16:38:12.000Z</published>
    <updated>2019-10-12T15:33:33.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最近公共祖先（Least-Common-Ancestor）"><a href="#最近公共祖先（Least-Common-Ancestor）" class="headerlink" title="最近公共祖先（Least Common Ancestor）"></a>最近公共祖先（Least Common Ancestor）</h1><hr><h2 id="什么是最近公共祖先"><a href="#什么是最近公共祖先" class="headerlink" title="什么是最近公共祖先"></a>什么是最近公共祖先</h2><blockquote><p> 对于有根树 $T$ 的两个结点 $u、v$，最近公共祖先$LCA(T, u, v)$表示一个结点 $x$，满足 $x$ 是 $u$ 或 $v$ 的<strong>祖先</strong>且 $x$ 的深度尽可能大。<strong><em>——百度百科</em></strong></p></blockquote><h2 id="怎么求两点的最近公共祖先"><a href="#怎么求两点的最近公共祖先" class="headerlink" title="怎么求两点的最近公共祖先"></a>怎么求两点的最近公共祖先</h2><p>一般来说我们都是使用树上倍增的方法来求LCA，这种写法能在<strong>$O(log(n))$</strong>的速度下快速处理单次查询。总的时间复杂度就在$O(nlog(n))$</p><p>变量的定义及其意义见下表</p><table><thead><tr><th align="center">变量</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center"><code>depth[i]</code></td><td align="center">表示 $i$ 节点的深度</td></tr><tr><td align="center"><code>fa[i][j]</code></td><td align="center">表示 $i$ 节点的 $2 ^ j$ 级祖先</td></tr><tr><td align="center"><code>lg[i]</code></td><td align="center">以二为底的对数</td></tr><tr><td align="center"><code>head[i]</code></td><td align="center">前向星存树</td></tr></tbody></table><h2 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> depth[<span class="number">500005</span>];<span class="comment">//记录节点的深度</span></span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">500005</span>][<span class="number">35</span>];</span><br><span class="line"><span class="keyword">int</span> lg[<span class="number">500005</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">500005</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//从大向小跳，这样不会出现悔棋现象，原因是倒过来可以判断是否大于了要求，若大于可以很简单的跳过</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> from;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> nxt;</span><br><span class="line">&#125;e[<span class="number">2</span> * <span class="number">500005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">e[++ cnt].nxt = head[u];</span><br><span class="line">e[cnt].from = u;</span><br><span class="line">e[cnt].to = v;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> f)</span> </span>&#123;<span class="comment">//now是当前节点，f是now的父亲</span></span><br><span class="line">depth[now] = depth[f] + <span class="number">1</span>;<span class="comment">//记录节点的深度，就是父亲节点的深度加一</span></span><br><span class="line">fa[now][<span class="number">0</span>] = f;<span class="comment">//now节点，也就是当前的节点的2^0级祖先，也即父亲是f。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= depth[now]; i ++) &#123;<span class="comment">//祖先的深的不可能小于0，所以有for中的判断</span></span><br><span class="line">fa[now][i] = fa[fa[now][i - <span class="number">1</span>]][i - <span class="number">1</span>];<span class="comment">//now的2^i祖先是now的2^(i-1)级祖先的2^(i-1)级祖先</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[now]; i; i = e[i].nxt) &#123;<span class="comment">//向下更新now的儿子节点。</span></span><br><span class="line"><span class="keyword">if</span>(e[i].to != f) &#123;<span class="comment">//所连的边不能为父亲，因为我们已经更新完了。//双向边，所以加这个特判</span></span><br><span class="line">dfs(e[i].to, now);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;<span class="comment">//开始求两个节点之间的lca</span></span><br><span class="line"><span class="keyword">if</span>(depth[x] &lt; depth[y]) swap(x ,y);<span class="comment">//设depth[x] &gt;= depth[y]</span></span><br><span class="line"><span class="keyword">while</span>(depth[x] &gt; depth[y]) &#123;</span><br><span class="line">x = fa[x][lg[depth[x] - depth[y]] - <span class="number">1</span>];<span class="comment">//将两个节点先跳到同一个深度，因为每次都要跳相同的深度，这样才有可能跳到x，y的lca</span></span><br><span class="line">&#125;<span class="comment">//每次求高度*差*(这样就能控制跳的高度）的对数，而且都是向下取整，这样能保证不会跳过。</span></span><br><span class="line"><span class="keyword">if</span>(x == y) &#123;<span class="comment">//如果y是x的祖先，那么他们的lca就是y</span></span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = lg[depth[x]] - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) &#123;<span class="comment">//一块向上跳，每次修改x也可以做到和上面的while循环一样的效果。</span></span><br><span class="line"><span class="keyword">if</span>(fa[x][i] != fa[y][i]) &#123;</span><br><span class="line">x = fa[x][i];</span><br><span class="line">y = fa[y][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i ++) &#123;</span><br><span class="line"><span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">addedge(u, v);</span><br><span class="line">addedge(v, u);</span><br><span class="line">&#125;</span><br><span class="line">dfs(s, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">lg[i] = lg[i - <span class="number">1</span>] + ((<span class="number">1</span> &lt;&lt; lg[i - <span class="number">1</span>]) == i);<span class="comment">//保存了以二为底所有数的对数 + 1（向下取整</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line"><span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lca(u, v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LCA的应用"><a href="#LCA的应用" class="headerlink" title="LCA的应用?"></a>LCA的应用?</h2><ul><li>emm…其实我不是很清楚，因为我还没有做过<strong>LCA</strong>的题，因此不要问我！</li></ul><h2 id="如何用别的算法（非倍增-来求LCA"><a href="#如何用别的算法（非倍增-来求LCA" class="headerlink" title="如何用别的算法（非倍增 来求LCA"></a>如何用别的算法（非倍增 来求LCA</h2><ul><li><strong>Tarjan</strong>大法好！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最近公共祖先（Least-Common-Ancestor）&quot;&gt;&lt;a href=&quot;#最近公共祖先（Least-Common-Ancestor）&quot; class=&quot;headerlink&quot; title=&quot;最近公共祖先（Least Common Ancestor）&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
      <category term="Algorithms Learning" scheme="http://kyherg.kk/tags/Algorithms-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Segment Tree</title>
    <link href="http://kyherg.kk/Segment-Tree/"/>
    <id>http://kyherg.kk/Segment-Tree/</id>
    <published>2019-10-07T14:02:02.000Z</published>
    <updated>2019-10-11T16:33:33.413Z</updated>
    
    <content type="html"><![CDATA[<p>济南培训，讲了一大堆玄学东西，第一天老师AC自动机加DP，然后吐槽我们不会（话说我为什么要写这些烂东西</p><h2 id="步入正题"><a href="#步入正题" class="headerlink" title="步入正题"></a>步入正题</h2><hr><p>我们用一个简单的问题引入：</p><p><strong>怎么才能维护区间和并且支持修改？（话说我自己也不知道线段树到底是因为什么而发明的…</strong></p><p>我们很容易的想出一个做法：暴力啊</p><p><strong>吼啊</strong>！！</p><p>当然不行啦，如果数据范围过大就一定会爆炸！</p><p>那么我们能用什么方法来进行比较好的维护这些操作呢?</p><p><strong>（以下故事纯属瞎编</strong> 一群神仙就想了，计算机和什么最有缘分？ $2$啊！ST表，求LCA都是基于$2$的倍增算法，时间复杂度分析中$log$直接就是以$2$为底，我们都不用思考就是关于$2$</p><p>然后，他们就gao出了线段树。。</p><hr><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><blockquote><ul><li>将区间<strong>树形化</strong>，借用大佬的话，就是将区间问题<strong>转化</strong>为树上问题，就是因为二叉树这个数据结构我们非常熟悉，因而就将它建成二叉树</li><li>既然要建树，我们都知道树上的节点是可以存许多东西的，那么我们是不是可以用节点来保存我们想要的信息呢?</li><li>然后就没有然后了。</li></ul></blockquote><h2 id="具体的实现"><a href="#具体的实现" class="headerlink" title="具体的实现"></a>具体的实现</h2><ul><li><p>首先，我们考虑怎么建出线段树</p><ul><li>每个节点该保存什么？<ul><li>这个节点所维护的区间范围</li><li>所维护的信息</li></ul></li></ul></li><li><p>怎么维护呢？</p><ul><li>二叉树是递归结构，因此肯定需要用<strong>递归</strong>啊</li><li>当我们递归到我们所要修改的区间 *<em>（单点查询类似 *</em>时，只需要将这个区间上的要修改的值修改后合并即可，合并要在修改后完成</li></ul></li><li><p>然后我们发现了一个很大的问题，如果们进行区间修改（把区间内的数加上同一个数，会进行大量的递归，就不能保证线段树的复杂度，该怎么办呢？</p><p>然后，就有“懒人”想出了一个办法：我们只要在要进行修改的区间上打上一个标记，表示这个节点维护的所有区间（也就是我们讲的<code>lazytag</code>，能保证线段树的多种操作的复杂度的正确性。</p></li></ul><h3 id="然后，我们就可以贴代码了"><a href="#然后，我们就可以贴代码了" class="headerlink" title="然后，我们就可以贴代码了"></a>然后，我们就可以贴代码了</h3><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">ll a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l;</span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line"><span class="keyword">int</span> lazy_add;</span><br><span class="line">ll sum;</span><br><span class="line">&#125;tree[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">tree[p].l = l;</span><br><span class="line">tree[p].r = r;</span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">tree[p].sum = a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">build(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">tree[p].sum = tree[p &lt;&lt; <span class="number">1</span>].sum + tree[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">tree[p &lt;&lt; <span class="number">1</span>].lazy_add += tree[p].lazy_add;</span><br><span class="line">tree[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lazy_add += tree[p].lazy_add;</span><br><span class="line">tree[p &lt;&lt; <span class="number">1</span>].sum += tree[p].lazy_add * (tree[p &lt;&lt; <span class="number">1</span>].r - tree[p &lt;&lt; <span class="number">1</span>].l + <span class="number">1</span>);</span><br><span class="line">tree[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum += tree[p].lazy_add * (tree[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].r - tree[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].l + <span class="number">1</span>);</span><br><span class="line">tree[p].lazy_add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[p].l &gt;= l &amp;&amp; tree[p].r &lt;= r) &#123;</span><br><span class="line">tree[p].lazy_add += d;</span><br><span class="line">tree[p].sum += (ll)d * (tree[p].r - tree[p].l + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down(p);</span><br><span class="line"><span class="keyword">int</span> mid = (tree[p].l + tree[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= mid) &#123;</span><br><span class="line">update(p &lt;&lt; <span class="number">1</span>, l, r, d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r &gt; mid) &#123;</span><br><span class="line">update(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, d);</span><br><span class="line">&#125;</span><br><span class="line">tree[p].sum = tree[p &lt;&lt; <span class="number">1</span>].sum + tree[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tree[p].l &gt;= l &amp;&amp; tree[p].r &lt;= r) &#123;</span><br><span class="line"><span class="keyword">return</span> tree[p].sum;</span><br><span class="line">&#125;</span><br><span class="line">push_down(p);</span><br><span class="line"><span class="keyword">int</span> mid = (tree[p].l + tree[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= mid) &#123;</span><br><span class="line">val += query(p &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r &gt; mid) &#123;</span><br><span class="line">val += query(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line"><span class="keyword">int</span> opt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;opt);</span><br><span class="line"><span class="keyword">if</span>(opt == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;k);</span><br><span class="line">update(<span class="number">1</span>, x, y, k);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(<span class="number">1</span>, x, y));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码有一点小小的错误。"><a href="#代码有一点小小的错误。" class="headerlink" title="代码有一点小小的错误。"></a>代码有一点小小的错误。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;济南培训，讲了一大堆玄学东西，第一天老师AC自动机加DP，然后吐槽我们不会（话说我为什么要写这些烂东西&lt;/p&gt;
&lt;h2 id=&quot;步入正题&quot;&gt;&lt;a href=&quot;#步入正题&quot; class=&quot;headerlink&quot; title=&quot;步入正题&quot;&gt;&lt;/a&gt;步入正题&lt;/h2&gt;&lt;hr&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="Algorithms Learning" scheme="http://kyherg.kk/tags/Algorithms-Learning/"/>
    
  </entry>
  
  <entry>
    <title>费解的开关</title>
    <link href="http://kyherg.kk/%E8%B4%B9%E8%A7%A3%E7%9A%84%E5%BC%80%E5%85%B3/"/>
    <id>http://kyherg.kk/费解的开关/</id>
    <published>2019-09-28T15:19:58.000Z</published>
    <updated>2019-10-16T15:45:17.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="很久以前就听过本题，到现在才做-（"><a href="#很久以前就听过本题，到现在才做-（" class="headerlink" title="很久以前就听过本题，到现在才做 （"></a>很久以前就听过本题，到现在才做 （</h1><h2 id="暴力思路："><a href="#暴力思路：" class="headerlink" title="暴力思路："></a>暴力思路：</h2><ul><li>*<em>枚举每个灯泡是否按下 *</em></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h2><ul><li>复杂度是 $2^{25}=33,554,432$，可以做，但是耗时较长</li></ul><h2 id="如何优化？"><a href="#如何优化？" class="headerlink" title="如何优化？"></a>如何优化？</h2><p><strong>我们观察到该阵列的一个性质：想要改变某一行的状态只有下一行会影响（假设我们锁定了这一行，业即我们枚举了这一行）</strong></p><p>现在我们考虑我们能否通过某行状态推出下一行的状态？</p><p>观察到若一行中的某个灯为零，那就只能按下面的灯了。</p><p><strong>综上，由第一行能推出第二行，结合数学归纳法，我们就可以确定算法</strong></p><ul><li>枚举第一行</li><li>通过第一行递推出第 $1-4$ 行。</li><li>确定第五行是否能满足最终的条件。</li><li>记录并保存最小操作数即可。</li></ul><h2 id="Code：-内有注释"><a href="#Code：-内有注释" class="headerlink" title="Code：(内有注释)"></a>Code：(内有注释)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> back[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">turn</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++) &#123;</span><br><span class="line"><span class="keyword">int</span> newx = x + dx[i];</span><br><span class="line"><span class="keyword">int</span> newy = y + dy[i];</span><br><span class="line"><span class="keyword">if</span>(newx &gt;= <span class="number">0</span> &amp;&amp; newy &gt;= <span class="number">0</span> &amp;&amp; newx &lt; <span class="number">5</span> &amp;&amp; newy &lt; <span class="number">5</span>) &#123;</span><br><span class="line"><span class="built_in">map</span>[newx][newy] ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">999999</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; <span class="number">5</span>; i ++) &#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(back, <span class="built_in">map</span>, <span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j ++) &#123;</span><br><span class="line"><span class="keyword">if</span>((i &gt;&gt; j &amp; <span class="number">1</span>))<span class="comment">//枚举哪一位上为一，就按下, 我们在枚举按下的方式。</span></span><br><span class="line">&#123;</span><br><span class="line">res ++;</span><br><span class="line">turn(<span class="number">0</span>, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++)<span class="comment">//不是0-5是因为若我们递推最后一行，那么最后一行的下一行在哪呢?</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="string">'0'</span>) &#123;</span><br><span class="line">res ++;</span><br><span class="line">turn(i + <span class="number">1</span>, j);<span class="comment">//某个位置为零，按照规定，只能按下一行的按钮。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;<span class="comment">//判断是否能作为解来进行更新</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[<span class="number">4</span>][i] == <span class="string">'0'</span>) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) ans = min(ans, res);</span><br><span class="line"><span class="built_in">memcpy</span>(<span class="built_in">map</span>, back, <span class="keyword">sizeof</span>(back));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans &gt; <span class="number">6</span>) ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span>(t --) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++) &#123;<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i];&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, calc());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>对于某些带有特殊操作的题，应考虑能否在状态与状态之间的影响上找到突破。</li></ul><p>  <strong>代码学自 <em>yxc</em> 老师 in Acwing</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;很久以前就听过本题，到现在才做-（&quot;&gt;&lt;a href=&quot;#很久以前就听过本题，到现在才做-（&quot; class=&quot;headerlink&quot; title=&quot;很久以前就听过本题，到现在才做 （&quot;&gt;&lt;/a&gt;很久以前就听过本题，到现在才做 （&lt;/h1&gt;&lt;h2 id=&quot;暴力思路：
      
    
    </summary>
    
    
    
      <category term="Algorithms Learning" scheme="http://kyherg.kk/tags/Algorithms-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Sunscreen</title>
    <link href="http://kyherg.kk/Sunscreen/"/>
    <id>http://kyherg.kk/Sunscreen/</id>
    <published>2019-09-25T04:44:09.000Z</published>
    <updated>2019-10-16T15:44:38.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><blockquote><p><em>按照 $minspf$​ 递减的顺序把每头牛排序，然后依次考虑每头奶牛。</em><br><em>对于每头奶牛可以选择的防晒霜中，找 $spf$ 最大的。</em></p></blockquote><p>这是因为对于任意的两瓶防晒霜 $x$ 与 $y$ ($x &lt; y$)，对后面的奶牛只有这些情况。</p><table><thead><tr><th align="center">$x$</th><th align="center">$y$</th></tr></thead><tbody><tr><td align="center">能用</td><td align="center">能用</td></tr><tr><td align="center">能用</td><td align="center">不能用</td></tr><tr><td align="center">不能用</td><td align="center">不能用</td></tr></tbody></table><p>$p.s:$ 这些都是可用的防晒霜，所以 $minspf &lt; x &lt; y$，所以不会出现 $x$ 能用而 $y$ 不能用的情况。</p><p>这样就能一目了然为什么要先选择 $spf$ 较大的防晒霜了。<br>就算是这头奶牛没有日光浴，其他奶牛仍然可以使用这瓶防晒霜。</p><h3 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IO</span> &#123;</span></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt; <span class="keyword">inline</span> IO <span class="keyword">operator</span> &gt;&gt; (T &amp;n) &#123;</span><br><span class="line">n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = getchar();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">c = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">n = (n &lt;&lt; <span class="number">3</span>) + (n &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);</span><br><span class="line">c = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="built_in">cin</span>;<span class="comment">//某机房大佬的快读。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">priority_queue &lt; <span class="keyword">int</span>, <span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt;, greater &lt; <span class="keyword">int</span> &gt;  &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">COW</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> minspf;</span><br><span class="line"><span class="keyword">int</span> maxspf;</span><br><span class="line">&#125;cow[<span class="number">2505</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LOT</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> spf;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line">&#125;lot[<span class="number">2505</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(COW a, COW b)</span></span>&#123;<span class="keyword">return</span> (a.minspf &lt; b.minspf);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(LOT a, LOT b)</span></span>&#123;<span class="keyword">return</span> a.spf &lt; b.spf;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line">sort(cow + <span class="number">1</span>, cow + c + <span class="number">1</span>, cmp1);</span><br><span class="line">sort(lot + <span class="number">1</span>, lot + l + <span class="number">1</span>, cmp2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= l; i ++) &#123;</span><br><span class="line"><span class="keyword">while</span>((id &lt;= c) &amp;&amp; cow[id].minspf &lt;= lot[i].spf)<span class="comment">//把minspf小于防晒霜spf的奶牛的second压入小根堆（负号）</span></span><br><span class="line">        &#123;<span class="comment">//这样做就可以把可能用该防晒霜的奶牛加入。</span></span><br><span class="line">q.push(cow[id ++].maxspf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>((!q.empty()) &amp;&amp; (q.top() &lt; lot[i].spf)) &#123;q.pop();&#125;<span class="comment">//开始对奶牛进行筛选，对于不满足的弹出</span></span><br><span class="line"><span class="keyword">while</span>(!q.empty() &amp;&amp; (lot[i].tot --))<span class="comment">//这个防晒霜对于堆顶是合适的，对于这些奶牛，这个防晒霜就是能满足的spf最大的。</span></span><br><span class="line">&#123;</span><br><span class="line">ans ++;</span><br><span class="line">q.pop();<span class="comment">//该奶牛已经处理完了，应该弹出。</span></span><br><span class="line">&#125;<span class="comment">//这里是while是因为我们把minspf小于该防晒霜spf全部加入了堆，并且去除掉了不合法的，那么剩下的一定全部都能用这个防晒霜，且刚好满足，原因是因为若再向后移动一个奶牛，就会导致minspf大于该防晒霜的spf。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c &gt;&gt; l;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; i ++) &#123;<span class="built_in">cin</span> &gt;&gt; cow[i].minspf &gt;&gt; cow[i].maxspf;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= l; i ++) &#123;<span class="built_in">cin</span> &gt;&gt; lot[i].spf &gt;&gt; lot[i].tot;&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, work());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="——-摘自圣经"><a href="#——-摘自圣经" class="headerlink" title="—— 摘自圣经"></a>—— <em>摘自圣经</em></h3><h3 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h3><p>注释之中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;贪心&quot;&gt;&lt;a href=&quot;#贪心&quot; class=&quot;headerlink&quot; title=&quot;贪心&quot;&gt;&lt;/a&gt;贪心&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;按照 $minspf$​ 递减的顺序把每头牛排序，然后依次考虑每头奶牛。&lt;/em&gt;&lt;br&gt;&lt;em&gt;对于每头
      
    
    </summary>
    
    
    
      <category term="Algorithms Learning" scheme="http://kyherg.kk/tags/Algorithms-Learning/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX Learning</title>
    <link href="http://kyherg.kk/LaTeX-Learning/"/>
    <id>http://kyherg.kk/LaTeX-Learning/</id>
    <published>2019-09-22T05:01:07.000Z</published>
    <updated>2019-09-22T05:02:18.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LaTeX学习笔记-–2019-8-18"><a href="#LaTeX学习笔记-–2019-8-18" class="headerlink" title="LaTeX学习笔记 –2019.8.18"></a>LaTeX学习笔记 –2019.8.18</h1><hr><h2 id="偷懒直接在代码后接注释表明注意事项和用途"><a href="#偷懒直接在代码后接注释表明注意事项和用途" class="headerlink" title="偷懒直接在代码后接注释表明注意事项和用途"></a>偷懒直接在代码后接注释表明注意事项和用途</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125; %report, book, letter</span><br><span class="line">\title&#123;name&#125;</span><br><span class="line">\date&#123;date&#125;</span><br><span class="line">\author&#123;name&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">$数学公式$ %和文本在同一行</span><br><span class="line">$$数学公式$$ %可以单行表示</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>一个LaTeX源文件由正文区和导言区构成。</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF-8]&#123;ctexart&#125; %可以用来处理中文</span><br><span class="line">\title&#123;\kaishu \today&#125; %在使用中文是可以指定字体(也许英文也行，但没讲)</span><br><span class="line">%or</span><br><span class="line">\documentclass[UTF-8]&#123;article&#125;</span><br><span class="line">\usepackage&#123;CTEX&#125;</span><br></pre></td></tr></table></figure><p>处理中文要注意必须保证编码为UTF-8，并且加载ctex宏包</p><hr><p>LaTeX中有环境，让一些效果在局部生效，用法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;&lt;environment name&gt;&#125;[&lt;optional arguments&gt;]&#123;mandatory arguments&#125;</span><br><span class="line">...</span><br><span class="line">\end&#123;&lt;environment name&gt;&#125;</span><br></pre></td></tr></table></figure><p>LaTeX提供分组的功能，<code>{ }</code> 一对为一组，在分组中的命令会被限制在组内生效。</p><p>在document环境中的内容是文档正文。在<code>\documentclass</code> 和<code>\begin{document}</code> 之间的位置称为_导言区_，在LaTeX的开头必须指定文档类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[⟨options⟩]&#123;⟨class-name⟩&#125;</span><br></pre></td></tr></table></figure><p><em>在lshort-zh 1.4.1结束</em></p><h5 id="2019-8-18-14-51-——cuizhenkai"><a href="#2019-8-18-14-51-——cuizhenkai" class="headerlink" title="2019.8.18  14:51                                                                                                                                     ——cuizhenkai"></a>2019.8.18  14:51                                                                                                                                     <em>——cuizhenkai</em></h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LaTeX学习笔记-–2019-8-18&quot;&gt;&lt;a href=&quot;#LaTeX学习笔记-–2019-8-18&quot; class=&quot;headerlink&quot; title=&quot;LaTeX学习笔记 –2019.8.18&quot;&gt;&lt;/a&gt;LaTeX学习笔记 –2019.8.18&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="LaTeX" scheme="http://kyherg.kk/tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>Running Median</title>
    <link href="http://kyherg.kk/Running-Median/"/>
    <id>http://kyherg.kk/Running-Median/</id>
    <published>2019-09-18T05:23:47.000Z</published>
    <updated>2019-10-16T15:43:45.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对于-圣经-上Running-Median的理解"><a href="#对于-圣经-上Running-Median的理解" class="headerlink" title="对于 圣经 上Running Median的理解"></a>对于 <em>圣经</em> 上Running Median的理解</h1><h4 id="–By-cuizhenkai"><a href="#–By-cuizhenkai" class="headerlink" title="–By cuizhenkai"></a>–<em>By cuizhenkai</em></h4><h5 id="动态维护中位数。"><a href="#动态维护中位数。" class="headerlink" title="动态维护中位数。"></a>动态维护中位数。</h5><p>对于特殊的输出格式，我们就不在这里做任何分析了。// 其实是偷懒</p><p>这道题目在 <strong>圣经</strong> 中是这样说的</p><blockquote><p>建立两个二叉堆，一个小根堆，一个大根堆。设有$M$个数，则前$M/2$个数存储到大根堆，后面的存到小根堆。</p></blockquote><h3 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h3><ul><li>按照这种方式就可以将中位数维持在堆顶上，但是还需要更新<code>mid</code>的值来进行判断。</li></ul><h3 id="实现上的错误"><a href="#实现上的错误" class="headerlink" title="实现上的错误 :"></a>实现上的错误 :</h3><ul><li>没有动态维护中位数的值<code>mid</code>。</li><li>在保证两个堆中的数字相同时，<code>while</code>循环中的条件写错了。应为大(小)根堆比小(大)根堆多$1$个元素进行维护。</li><li>没有更新当$M$是偶数的情况。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">priority_queue &lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; s;</span><br><span class="line">priority_queue &lt; <span class="keyword">int</span> &gt; l;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p --) &#123;</span><br><span class="line"><span class="keyword">while</span>(!s.empty()) &#123;s.pop();&#125;</span><br><span class="line"><span class="keyword">while</span>(!l.empty()) &#123;l.pop();&#125;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> mid = <span class="number">-0x3f</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;index, &amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, index, (n + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span>(l.empty()) &#123;</span><br><span class="line">l.push(x);</span><br><span class="line">mid = x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, x);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x &lt; mid) &#123;l.push(x);&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;s.push(x);&#125;</span><br><span class="line"><span class="keyword">while</span>((<span class="keyword">int</span>)l.size() - (<span class="keyword">int</span>)s.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> tmp = l.top();</span><br><span class="line">l.pop();</span><br><span class="line">s.push(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>((<span class="keyword">int</span>)s.size() - (<span class="keyword">int</span>)l.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> tmp = s.top();</span><br><span class="line">s.pop();</span><br><span class="line">l.push(tmp);</span><br><span class="line">&#125;</span><br><span class="line">mid = l.top();</span><br><span class="line"><span class="keyword">if</span>(i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">cnt ++;</span><br><span class="line"><span class="keyword">if</span>(l.size() &gt; s.size())&#123;mid = l.top();&#125;</span><br><span class="line"><span class="keyword">else</span>   &#123;mid = s.top();&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt % <span class="number">10</span> == <span class="number">0</span>) &#123;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mid);&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="built_in">printf</span>(<span class="string">"%d "</span>, mid);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;mid = (l.top() + s.top()) / <span class="number">2</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt % <span class="number">10</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对于-圣经-上Running-Median的理解&quot;&gt;&lt;a href=&quot;#对于-圣经-上Running-Median的理解&quot; class=&quot;headerlink&quot; title=&quot;对于 圣经 上Running Median的理解&quot;&gt;&lt;/a&gt;对于 &lt;em&gt;圣经&lt;/em&gt;
      
    
    </summary>
    
    
    
      <category term="Algorithms Learning" scheme="http://kyherg.kk/tags/Algorithms-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Sticks</title>
    <link href="http://kyherg.kk/Sticks/"/>
    <id>http://kyherg.kk/Sticks/</id>
    <published>2019-09-17T05:04:20.000Z</published>
    <updated>2019-10-16T15:45:49.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对于圣经-上所讲Sticks的理解。"><a href="#对于圣经-上所讲Sticks的理解。" class="headerlink" title="对于圣经 上所讲Sticks的理解。"></a>对于<em>圣经</em> 上所讲Sticks的理解。</h1><h4 id="—-By-cuizhenkai"><a href="#—-By-cuizhenkai" class="headerlink" title="— By cuizhenkai"></a>— <em>By cuizhenkai</em></h4><h2 id="1-优化搜索顺序"><a href="#1-优化搜索顺序" class="headerlink" title="1.优化搜索顺序"></a>1.优化搜索顺序</h2><h4 id="从小到大排序，-优先尝试较长的木棍。"><a href="#从小到大排序，-优先尝试较长的木棍。" class="headerlink" title="从小到大排序， 优先尝试较长的木棍。"></a><em>从小到大排序， 优先尝试较长的木棍。</em></h4><h4 id="理解"><a href="#理解" class="headerlink" title="理解:"></a>理解:</h4><ul><li>从最大开始可以较快的排除不可能的分支，避免<code>dfs</code>进入比较深的树。</li><li>若从最小开始，则有可能前几根可以拼好，但是后面的不能满足条件，让<code>dfs</code>进入了更深的层。</li></ul><h2 id="2-排除等效冗余"><a href="#2-排除等效冗余" class="headerlink" title="2. 排除等效冗余"></a>2. 排除等效冗余</h2><h4 id="A-限制先后加入一根原始木棍的长度递减。"><a href="#A-限制先后加入一根原始木棍的长度递减。" class="headerlink" title="A )  限制先后加入一根原始木棍的长度递减。"></a><em>A )  限制先后加入一根原始木棍的长度递减</em>。</h4><h4 id="理解-1"><a href="#理解-1" class="headerlink" title="理解:"></a>理解:</h4><ul><li>先拼长度为 $x$，再拼为 $y$ 的木棍 $(x &lt; y)$ 与反之是等效的。</li></ul><h4 id="B-对于当前原始木棒，记录最近一次尝试拼接的长度，如果失败回溯，不再向该木棒中添加一样长的木棍。"><a href="#B-对于当前原始木棒，记录最近一次尝试拼接的长度，如果失败回溯，不再向该木棒中添加一样长的木棍。" class="headerlink" title="B ) 对于当前原始木棒，记录最近一次尝试拼接的长度，如果失败回溯，不再向该木棒中添加一样长的木棍。"></a><em>B ) 对于当前原始木棒，记录最近一次尝试拼接的长度，如果失败回溯，不再向该木棒中添加一样长的木棍。</em></h4><p>—— 这个比较好理解。</p><h4 id="C-若在当前原始木棒中，尝试的第一根木棍就失败，那么该分支失败。"><a href="#C-若在当前原始木棒中，尝试的第一根木棍就失败，那么该分支失败。" class="headerlink" title="C ) 若在当前原始木棒中，尝试的第一根木棍就失败，那么该分支失败。"></a><em>C ) 若在当前原始木棒中，尝试的第一根木棍就失败，那么该分支失败。</em></h4><h4 id="理解-2"><a href="#理解-2" class="headerlink" title="理解:"></a>理解:</h4><ul><li>按照上面的剪枝，我们可以知道，对一根原始木棒，尝试的第一根木棍就失败，意味着其他的空木棒也必定失败。</li></ul><h4 id="D-若向一根原始木棒拼接了一根木棍后，恰好成功，但是下面的分支失败，那么此分支失败"><a href="#D-若向一根原始木棒拼接了一根木棍后，恰好成功，但是下面的分支失败，那么此分支失败" class="headerlink" title="D ) 若向一根原始木棒拼接了一根木棍后，恰好成功，但是下面的分支失败，那么此分支失败"></a><em>D ) 若向一根原始木棒拼接了一根木棍后，恰好成功，但是下面的分支失败，那么此分支失败</em></h4><h4 id="理解-3"><a href="#理解-3" class="headerlink" title="理解:"></a>理解:</h4><ul><li>用一根拼好比用若干根其他木棍拼好要更优，原因是长度小的木棍更灵活。</li></ul><p>Code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> now, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s &gt; cnt) &#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(now == len) &#123;<span class="keyword">return</span> dfs(s + <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);&#125;</span><br><span class="line"><span class="keyword">int</span> fail = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = last; i &lt;= ans; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i] &amp;&amp; now + a[i] &lt;= len &amp;&amp; fail != a[i]) &#123;</span><br><span class="line">vis[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(dfs(s, now + a[i], i + <span class="number">1</span>)) &#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line">fail = a[i];</span><br><span class="line">vis[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(now == <span class="number">0</span> || now + a[i] == len) &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> maxm = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span>(x &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">a[++ans] = x;</span><br><span class="line">tot += a[ans];</span><br><span class="line">maxm = max(maxm, a[ans]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(a + <span class="number">1</span>, a + ans + <span class="number">1</span>);</span><br><span class="line">reverse(a + <span class="number">1</span>, a + ans + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(len = maxm; len &lt;= tot; len ++) &#123;</span><br><span class="line"><span class="keyword">if</span>(tot % len) <span class="keyword">continue</span>;</span><br><span class="line">cnt = tot / len;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">if</span>(dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>)) &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, len);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现时的错误"><a href="#实现时的错误" class="headerlink" title="实现时的错误:"></a>实现时的错误:</h3><ul><li>对于剪枝D的理解不清。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对于圣经-上所讲Sticks的理解。&quot;&gt;&lt;a href=&quot;#对于圣经-上所讲Sticks的理解。&quot; class=&quot;headerlink&quot; title=&quot;对于圣经 上所讲Sticks的理解。&quot;&gt;&lt;/a&gt;对于&lt;em&gt;圣经&lt;/em&gt; 上所讲Sticks的理解。&lt;/h1&gt;
      
    
    </summary>
    
    
    
      <category term="Algorithms Learning" scheme="http://kyherg.kk/tags/Algorithms-Learning/"/>
    
  </entry>
  
  <entry>
    <title>The first blog</title>
    <link href="http://kyherg.kk/My%20first%20blog/"/>
    <id>http://kyherg.kk/My first blog/</id>
    <published>2019-09-13T15:10:22.000Z</published>
    <updated>2019-09-19T15:22:38.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="This-is-the-first-blog-of-mine"><a href="#This-is-the-first-blog-of-mine" class="headerlink" title="This is the first blog of mine."></a>This is the first blog of mine.</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;This-is-the-first-blog-of-mine&quot;&gt;&lt;a href=&quot;#This-is-the-first-blog-of-mine&quot; class=&quot;headerlink&quot; title=&quot;This is the first blog of mine.&quot;
      
    
    </summary>
    
    
    
      <category term="First" scheme="http://kyherg.kk/tags/First/"/>
    
  </entry>
  
</feed>
